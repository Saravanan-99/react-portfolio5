{"ast":null,"code":"import React from\"react\";import{Parallax}from\"react-scroll-parallax\";import Phone from\"../phone/phone.js\";import Laptop from\"../laptop/laptop.js\";import{ReactComponent as Shape4}from\"@svgr/webpack?-svgo,+titleProp,+ref!./img/shape-4-outline.svg\";import Image from\"../parallaxImage.js\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Workpanel=function Workpanel(props){var alignClass=\"copyLeft\";props.align===\"copy-left\"?alignClass=\"copy-left\":alignClass=\"copy-right\";// Let's get our challenges array and convert the elements to list items.\nvar challengeItems;if(props.challenges){var challenges=props.challenges;challengeItems=challenges.map(function(challenge){return/*#__PURE__*/_jsx(\"li\",{children:challenge},challenge);});}// Setup our Role display if prop has been supplied\nvar renderRole=function renderRole(){if(props.role){return/*#__PURE__*/_jsxs(\"div\",{className:\"tabs--role\",children:[/*#__PURE__*/_jsx(\"b\",{children:\"Role: \"}),props.role]});}};// Render the button if a link is supplied.\nvar renderLink=function renderLink(){if(props.link){return/*#__PURE__*/_jsx(\"a\",{className:\"section-work--link btn\",href:props.link,rel:\"nofollow\",children:\"Go to Project\"});}};// Setup device markup (laptop or phone).\nvar deviceMarkup;if(props.device===\"phone\"){deviceMarkup=/*#__PURE__*/_jsx(Phone,{id:props.id,device:props.device,deviceImages:props.deviceImages});}else if(props.device===\"laptop\"){deviceMarkup=/*#__PURE__*/_jsx(Laptop,{id:props.id,device:props.device,deviceImages:props.deviceImages});}return/*#__PURE__*/_jsxs(\"div\",{className:\"section section-work \"+alignClass,style:{backgroundColor:props.bgColor},children:[/*#__PURE__*/_jsxs(\"div\",{className:\"section-work--image\",children:[/*#__PURE__*/_jsx(Parallax,{className:\"work-image--bg\",disabled:props.parallaxDisabled,y:[-10,10],children:/*#__PURE__*/_jsx(Image,{src:\"/assets/img/\"+props.bgImage})}),/*#__PURE__*/_jsx(\"div\",{className:\"work-image--shape\",children:/*#__PURE__*/_jsx(Shape4,{})}),/*#__PURE__*/_jsx(Parallax,{className:\"work-image--fg\",y:[-60,0],disabled:props.parallaxDisabled,children:deviceMarkup})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"section-work--copy\",children:[/*#__PURE__*/_jsx(\"h2\",{style:{color:props.color},children:props.title}),/*#__PURE__*/_jsx(\"p\",{children:props.copy})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"section-work--base\",children:[challengeItems&&/*#__PURE__*/_jsx(\"p\",{children:\"The key challenges for this project included:\"}),/*#__PURE__*/_jsx(\"ul\",{className:\"tabs--challenges\",children:challengeItems}),renderRole(),renderLink()]})]});};export default Workpanel;","map":{"version":3,"sources":["/Users/marycollins/Documents/mary-collins/portfolio-2021/src/components/work/work-panel.js"],"names":["React","Parallax","Phone","Laptop","Image","Workpanel","props","alignClass","align","challengeItems","challenges","map","challenge","renderRole","role","renderLink","link","deviceMarkup","device","id","deviceImages","backgroundColor","bgColor","parallaxDisabled","bgImage","color","title","copy"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Parallax } from \"react-scroll-parallax\";\nimport Phone from \"../phone/phone.js\";\nimport Laptop from \"../laptop/laptop.js\";\nimport { ReactComponent as Shape4 } from \"./img/shape-4-outline.svg\";\nimport Image from \"../parallaxImage.js\";\n\nconst Workpanel = (props) => {\n  let alignClass = \"copyLeft\";\n  props.align === \"copy-left\"\n    ? (alignClass = \"copy-left\")\n    : (alignClass = \"copy-right\");\n  // Let's get our challenges array and convert the elements to list items.\n  let challengeItems;\n  if (props.challenges) {\n    const challenges = props.challenges;\n    challengeItems = challenges.map((challenge) => (\n      <li key={challenge}>{challenge}</li>\n    ));\n  }\n\n  // Setup our Role display if prop has been supplied\n\n  const renderRole = () => {\n    if (props.role) {\n      return (\n        <div className=\"tabs--role\">\n          <b>Role: </b>\n          {props.role}\n        </div>\n      );\n    }\n  };\n\n  // Render the button if a link is supplied.\n  const renderLink = () => {\n    if (props.link) {\n      return (\n        <a className=\"section-work--link btn\" href={props.link} rel=\"nofollow\">\n          Go to Project\n        </a>\n      );\n    }\n  };\n\n  // Setup device markup (laptop or phone).\n  let deviceMarkup;\n  if (props.device === \"phone\") {\n    deviceMarkup = (\n      <Phone\n        id={props.id}\n        device={props.device}\n        deviceImages={props.deviceImages}\n      />\n    );\n  } else if (props.device === \"laptop\") {\n    deviceMarkup = (\n      <Laptop\n        id={props.id}\n        device={props.device}\n        deviceImages={props.deviceImages}\n      />\n    );\n  }\n\n  return (\n    <div\n      className={\"section section-work \" + alignClass}\n      style={{ backgroundColor: props.bgColor }}\n    >\n      <div className=\"section-work--image\">\n        <Parallax\n          className=\"work-image--bg\"\n          disabled={props.parallaxDisabled}\n          y={[-10, 10]}\n        >\n          <Image src={\"/assets/img/\" + props.bgImage} />\n        </Parallax>\n        <div className=\"work-image--shape\">\n          <Shape4 />\n        </div>\n        <Parallax\n          className=\"work-image--fg\"\n          y={[-60, 0]}\n          disabled={props.parallaxDisabled}\n        >\n          {deviceMarkup}\n        </Parallax>\n      </div>\n      <div className=\"section-work--copy\">\n        <h2 style={{ color: props.color }}>{props.title}</h2>\n        <p>{props.copy}</p>\n      </div>\n\n      <div className=\"section-work--base\">\n        {challengeItems && <p>The key challenges for this project included:</p>}\n\n        <ul className=\"tabs--challenges\">{challengeItems}</ul>\n\n        {renderRole()}\n        {renderLink()}\n      </div>\n    </div>\n  );\n};\n\nexport default Workpanel;\n"]},"metadata":{},"sourceType":"module"}